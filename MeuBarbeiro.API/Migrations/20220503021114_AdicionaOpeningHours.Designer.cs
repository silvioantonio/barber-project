// <auto-generated />
using System;
using MeuBarbeiro.API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeuBarbeiro.API.Migrations
{
    [DbContext(typeof(MySQLContext))]
    [Migration("20220503021114_AdicionaOpeningHours")]
    partial class AdicionaOpeningHours
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MeuBarbeiro.API.Models.Appointment.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("WorkerId")
                        .HasColumnType("bigint")
                        .HasColumnName("worker_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.Provider.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("complemento");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("logradouro");

                    b.Property<int>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("numero");

                    b.Property<string>("Quadra")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("quadra");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("rua");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.Provider.Provider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("AvatarId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("avatar_id");

                    b.Property<string>("BarbershopName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("barbershop_name");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_date");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cpf_cnpj");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("phone");

                    b.Property<int>("ProviderOpeningHoursId")
                        .HasColumnType("int");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("services");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<int>("statusProvider")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProviderOpeningHoursId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.Provider.ProviderOpeningHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndHour")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_hour");

                    b.Property<string>("OpeningDay")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("opening_day");

                    b.Property<DateTime>("StartHour")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_hour");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("ProviderOpeningHours");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.ProviderHour.ProviderHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<DateTime?>("Hour")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("hour");

                    b.Property<int>("StatusHour")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long?>("WorkerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId");

                    b.ToTable("ProviderHour");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.User.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.Worker.Worker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("AvatarId")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("provider_id");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.Appointment.Appointment", b =>
                {
                    b.HasOne("MeuBarbeiro.API.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeuBarbeiro.API.Models.Worker.Worker", "Worker")
                        .WithMany("Appointments")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.Provider.Provider", b =>
                {
                    b.HasOne("MeuBarbeiro.API.Models.Provider.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeuBarbeiro.API.Models.Provider.ProviderOpeningHours", "ProviderOpeningHours")
                        .WithMany()
                        .HasForeignKey("ProviderOpeningHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("ProviderOpeningHours");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.ProviderHour.ProviderHour", b =>
                {
                    b.HasOne("MeuBarbeiro.API.Models.Worker.Worker", null)
                        .WithMany("ProviderHours")
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.Worker.Worker", b =>
                {
                    b.HasOne("MeuBarbeiro.API.Models.Provider.Provider", "Provider")
                        .WithMany("Workers")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.Provider.Provider", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("MeuBarbeiro.API.Models.Worker.Worker", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ProviderHours");
                });
#pragma warning restore 612, 618
        }
    }
}
